// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetRequest struct {
	Namespace            string   `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRequest) Reset()         { *m = GetRequest{} }
func (m *GetRequest) String() string { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()    {}
func (*GetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0}
}

func (m *GetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRequest.Unmarshal(m, b)
}
func (m *GetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRequest.Marshal(b, m, deterministic)
}
func (m *GetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRequest.Merge(m, src)
}
func (m *GetRequest) XXX_Size() int {
	return xxx_messageInfo_GetRequest.Size(m)
}
func (m *GetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRequest proto.InternalMessageInfo

func (m *GetRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type GetResponse struct {
	Metrics              string   `protobuf:"bytes,1,opt,name=metrics,proto3" json:"metrics,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetResponse) Reset()         { *m = GetResponse{} }
func (m *GetResponse) String() string { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()    {}
func (*GetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{1}
}

func (m *GetResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetResponse.Unmarshal(m, b)
}
func (m *GetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetResponse.Marshal(b, m, deterministic)
}
func (m *GetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetResponse.Merge(m, src)
}
func (m *GetResponse) XXX_Size() int {
	return xxx_messageInfo_GetResponse.Size(m)
}
func (m *GetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetResponse proto.InternalMessageInfo

func (m *GetResponse) GetMetrics() string {
	if m != nil {
		return m.Metrics
	}
	return ""
}

type RegisterCounterRequest struct {
	Namespace            string   `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description          string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Labels               []string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterCounterRequest) Reset()         { *m = RegisterCounterRequest{} }
func (m *RegisterCounterRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterCounterRequest) ProtoMessage()    {}
func (*RegisterCounterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{2}
}

func (m *RegisterCounterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterCounterRequest.Unmarshal(m, b)
}
func (m *RegisterCounterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterCounterRequest.Marshal(b, m, deterministic)
}
func (m *RegisterCounterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterCounterRequest.Merge(m, src)
}
func (m *RegisterCounterRequest) XXX_Size() int {
	return xxx_messageInfo_RegisterCounterRequest.Size(m)
}
func (m *RegisterCounterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterCounterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterCounterRequest proto.InternalMessageInfo

func (m *RegisterCounterRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *RegisterCounterRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RegisterCounterRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *RegisterCounterRequest) GetLabels() []string {
	if m != nil {
		return m.Labels
	}
	return nil
}

type RegisterHistogramRequest struct {
	Namespace            string    `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name                 string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description          string    `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Labels               []string  `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty"`
	Buckets              []float32 `protobuf:"fixed32,5,rep,packed,name=buckets,proto3" json:"buckets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *RegisterHistogramRequest) Reset()         { *m = RegisterHistogramRequest{} }
func (m *RegisterHistogramRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterHistogramRequest) ProtoMessage()    {}
func (*RegisterHistogramRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{3}
}

func (m *RegisterHistogramRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterHistogramRequest.Unmarshal(m, b)
}
func (m *RegisterHistogramRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterHistogramRequest.Marshal(b, m, deterministic)
}
func (m *RegisterHistogramRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterHistogramRequest.Merge(m, src)
}
func (m *RegisterHistogramRequest) XXX_Size() int {
	return xxx_messageInfo_RegisterHistogramRequest.Size(m)
}
func (m *RegisterHistogramRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterHistogramRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterHistogramRequest proto.InternalMessageInfo

func (m *RegisterHistogramRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *RegisterHistogramRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RegisterHistogramRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *RegisterHistogramRequest) GetLabels() []string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *RegisterHistogramRequest) GetBuckets() []float32 {
	if m != nil {
		return m.Buckets
	}
	return nil
}

type RegisterSummaryRequest struct {
	Namespace            string   `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description          string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Labels               []string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterSummaryRequest) Reset()         { *m = RegisterSummaryRequest{} }
func (m *RegisterSummaryRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterSummaryRequest) ProtoMessage()    {}
func (*RegisterSummaryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{4}
}

func (m *RegisterSummaryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterSummaryRequest.Unmarshal(m, b)
}
func (m *RegisterSummaryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterSummaryRequest.Marshal(b, m, deterministic)
}
func (m *RegisterSummaryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterSummaryRequest.Merge(m, src)
}
func (m *RegisterSummaryRequest) XXX_Size() int {
	return xxx_messageInfo_RegisterSummaryRequest.Size(m)
}
func (m *RegisterSummaryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterSummaryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterSummaryRequest proto.InternalMessageInfo

func (m *RegisterSummaryRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *RegisterSummaryRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RegisterSummaryRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *RegisterSummaryRequest) GetLabels() []string {
	if m != nil {
		return m.Labels
	}
	return nil
}

type RegisterGaugeRequest struct {
	Namespace            string   `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description          string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Labels               []string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterGaugeRequest) Reset()         { *m = RegisterGaugeRequest{} }
func (m *RegisterGaugeRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterGaugeRequest) ProtoMessage()    {}
func (*RegisterGaugeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{5}
}

func (m *RegisterGaugeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterGaugeRequest.Unmarshal(m, b)
}
func (m *RegisterGaugeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterGaugeRequest.Marshal(b, m, deterministic)
}
func (m *RegisterGaugeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterGaugeRequest.Merge(m, src)
}
func (m *RegisterGaugeRequest) XXX_Size() int {
	return xxx_messageInfo_RegisterGaugeRequest.Size(m)
}
func (m *RegisterGaugeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterGaugeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterGaugeRequest proto.InternalMessageInfo

func (m *RegisterGaugeRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *RegisterGaugeRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RegisterGaugeRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *RegisterGaugeRequest) GetLabels() []string {
	if m != nil {
		return m.Labels
	}
	return nil
}

type RegisterResponse struct {
	Api                  string   `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	Registered           bool     `protobuf:"varint,2,opt,name=registered,proto3" json:"registered,omitempty"`
	Error                string   `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterResponse) Reset()         { *m = RegisterResponse{} }
func (m *RegisterResponse) String() string { return proto.CompactTextString(m) }
func (*RegisterResponse) ProtoMessage()    {}
func (*RegisterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{6}
}

func (m *RegisterResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterResponse.Unmarshal(m, b)
}
func (m *RegisterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterResponse.Marshal(b, m, deterministic)
}
func (m *RegisterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterResponse.Merge(m, src)
}
func (m *RegisterResponse) XXX_Size() int {
	return xxx_messageInfo_RegisterResponse.Size(m)
}
func (m *RegisterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterResponse proto.InternalMessageInfo

func (m *RegisterResponse) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *RegisterResponse) GetRegistered() bool {
	if m != nil {
		return m.Registered
	}
	return false
}

func (m *RegisterResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type RecordCounterRequest struct {
	Namespace            string            `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name                 string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Value                float32           `protobuf:"fixed32,3,opt,name=value,proto3" json:"value,omitempty"`
	Labels               map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RecordCounterRequest) Reset()         { *m = RecordCounterRequest{} }
func (m *RecordCounterRequest) String() string { return proto.CompactTextString(m) }
func (*RecordCounterRequest) ProtoMessage()    {}
func (*RecordCounterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{7}
}

func (m *RecordCounterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RecordCounterRequest.Unmarshal(m, b)
}
func (m *RecordCounterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RecordCounterRequest.Marshal(b, m, deterministic)
}
func (m *RecordCounterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordCounterRequest.Merge(m, src)
}
func (m *RecordCounterRequest) XXX_Size() int {
	return xxx_messageInfo_RecordCounterRequest.Size(m)
}
func (m *RecordCounterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordCounterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RecordCounterRequest proto.InternalMessageInfo

func (m *RecordCounterRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *RecordCounterRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RecordCounterRequest) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *RecordCounterRequest) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

type RecordHistogramRequest struct {
	Namespace            string            `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name                 string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Value                float32           `protobuf:"fixed32,3,opt,name=value,proto3" json:"value,omitempty"`
	Labels               map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RecordHistogramRequest) Reset()         { *m = RecordHistogramRequest{} }
func (m *RecordHistogramRequest) String() string { return proto.CompactTextString(m) }
func (*RecordHistogramRequest) ProtoMessage()    {}
func (*RecordHistogramRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{8}
}

func (m *RecordHistogramRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RecordHistogramRequest.Unmarshal(m, b)
}
func (m *RecordHistogramRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RecordHistogramRequest.Marshal(b, m, deterministic)
}
func (m *RecordHistogramRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordHistogramRequest.Merge(m, src)
}
func (m *RecordHistogramRequest) XXX_Size() int {
	return xxx_messageInfo_RecordHistogramRequest.Size(m)
}
func (m *RecordHistogramRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordHistogramRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RecordHistogramRequest proto.InternalMessageInfo

func (m *RecordHistogramRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *RecordHistogramRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RecordHistogramRequest) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *RecordHistogramRequest) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

type RecordSummaryRequest struct {
	Namespace            string            `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name                 string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Value                float32           `protobuf:"fixed32,3,opt,name=value,proto3" json:"value,omitempty"`
	Labels               map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RecordSummaryRequest) Reset()         { *m = RecordSummaryRequest{} }
func (m *RecordSummaryRequest) String() string { return proto.CompactTextString(m) }
func (*RecordSummaryRequest) ProtoMessage()    {}
func (*RecordSummaryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{9}
}

func (m *RecordSummaryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RecordSummaryRequest.Unmarshal(m, b)
}
func (m *RecordSummaryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RecordSummaryRequest.Marshal(b, m, deterministic)
}
func (m *RecordSummaryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordSummaryRequest.Merge(m, src)
}
func (m *RecordSummaryRequest) XXX_Size() int {
	return xxx_messageInfo_RecordSummaryRequest.Size(m)
}
func (m *RecordSummaryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordSummaryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RecordSummaryRequest proto.InternalMessageInfo

func (m *RecordSummaryRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *RecordSummaryRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RecordSummaryRequest) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *RecordSummaryRequest) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

type RecordGaugeRequest struct {
	Namespace            string            `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name                 string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Value                float32           `protobuf:"fixed32,3,opt,name=value,proto3" json:"value,omitempty"`
	Labels               map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RecordGaugeRequest) Reset()         { *m = RecordGaugeRequest{} }
func (m *RecordGaugeRequest) String() string { return proto.CompactTextString(m) }
func (*RecordGaugeRequest) ProtoMessage()    {}
func (*RecordGaugeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{10}
}

func (m *RecordGaugeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RecordGaugeRequest.Unmarshal(m, b)
}
func (m *RecordGaugeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RecordGaugeRequest.Marshal(b, m, deterministic)
}
func (m *RecordGaugeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordGaugeRequest.Merge(m, src)
}
func (m *RecordGaugeRequest) XXX_Size() int {
	return xxx_messageInfo_RecordGaugeRequest.Size(m)
}
func (m *RecordGaugeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordGaugeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RecordGaugeRequest proto.InternalMessageInfo

func (m *RecordGaugeRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *RecordGaugeRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RecordGaugeRequest) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *RecordGaugeRequest) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

type RecordResponse struct {
	Api                  string   `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	Error                string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RecordResponse) Reset()         { *m = RecordResponse{} }
func (m *RecordResponse) String() string { return proto.CompactTextString(m) }
func (*RecordResponse) ProtoMessage()    {}
func (*RecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{11}
}

func (m *RecordResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RecordResponse.Unmarshal(m, b)
}
func (m *RecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RecordResponse.Marshal(b, m, deterministic)
}
func (m *RecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordResponse.Merge(m, src)
}
func (m *RecordResponse) XXX_Size() int {
	return xxx_messageInfo_RecordResponse.Size(m)
}
func (m *RecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RecordResponse proto.InternalMessageInfo

func (m *RecordResponse) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *RecordResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*GetRequest)(nil), "v1.GetRequest")
	proto.RegisterType((*GetResponse)(nil), "v1.GetResponse")
	proto.RegisterType((*RegisterCounterRequest)(nil), "v1.RegisterCounterRequest")
	proto.RegisterType((*RegisterHistogramRequest)(nil), "v1.RegisterHistogramRequest")
	proto.RegisterType((*RegisterSummaryRequest)(nil), "v1.RegisterSummaryRequest")
	proto.RegisterType((*RegisterGaugeRequest)(nil), "v1.RegisterGaugeRequest")
	proto.RegisterType((*RegisterResponse)(nil), "v1.RegisterResponse")
	proto.RegisterType((*RecordCounterRequest)(nil), "v1.RecordCounterRequest")
	proto.RegisterMapType((map[string]string)(nil), "v1.RecordCounterRequest.LabelsEntry")
	proto.RegisterType((*RecordHistogramRequest)(nil), "v1.RecordHistogramRequest")
	proto.RegisterMapType((map[string]string)(nil), "v1.RecordHistogramRequest.LabelsEntry")
	proto.RegisterType((*RecordSummaryRequest)(nil), "v1.RecordSummaryRequest")
	proto.RegisterMapType((map[string]string)(nil), "v1.RecordSummaryRequest.LabelsEntry")
	proto.RegisterType((*RecordGaugeRequest)(nil), "v1.RecordGaugeRequest")
	proto.RegisterMapType((map[string]string)(nil), "v1.RecordGaugeRequest.LabelsEntry")
	proto.RegisterType((*RecordResponse)(nil), "v1.RecordResponse")
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 559 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0xcb, 0x8a, 0xdb, 0x30,
	0x14, 0xc5, 0x4e, 0x32, 0xd3, 0x5c, 0x33, 0x8f, 0x8a, 0x10, 0x8c, 0x19, 0x4a, 0x30, 0x65, 0x1a,
	0xba, 0x08, 0xcc, 0x74, 0x33, 0x33, 0xf4, 0x41, 0x19, 0x4a, 0xba, 0xe8, 0xca, 0xb3, 0xeb, 0xce,
	0x71, 0x2e, 0xc1, 0x24, 0x7e, 0x54, 0x92, 0x03, 0xd9, 0x96, 0x7e, 0x48, 0x7f, 0xa5, 0xdf, 0xd0,
	0x45, 0x17, 0xfd, 0x99, 0x62, 0xd9, 0xb2, 0x65, 0x8f, 0x52, 0x5a, 0x12, 0xc8, 0xce, 0x57, 0xba,
	0xba, 0xe7, 0x1c, 0xe9, 0x5c, 0xc9, 0x70, 0xc2, 0x90, 0xae, 0xc3, 0x00, 0x27, 0x29, 0x4d, 0x78,
	0x42, 0xcc, 0xf5, 0x95, 0xfb, 0x12, 0x60, 0x8a, 0xdc, 0xc3, 0x2f, 0x19, 0x32, 0x4e, 0x2e, 0xa0,
	0x1f, 0xfb, 0x11, 0xb2, 0xd4, 0x0f, 0xd0, 0x36, 0x46, 0xc6, 0xb8, 0xef, 0xd5, 0x03, 0xee, 0x0b,
	0xb0, 0x44, 0x2e, 0x4b, 0x93, 0x98, 0x21, 0xb1, 0xe1, 0x38, 0x42, 0x4e, 0xc3, 0x80, 0x95, 0xa9,
	0x32, 0x74, 0xbf, 0x19, 0x30, 0xf4, 0x70, 0x11, 0x32, 0x8e, 0xf4, 0x3e, 0xc9, 0x62, 0x8e, 0xf4,
	0x9f, 0x10, 0x08, 0x81, 0x6e, 0x1e, 0xd8, 0xa6, 0x98, 0x10, 0xdf, 0x64, 0x04, 0xd6, 0x1c, 0x59,
	0x40, 0xc3, 0x94, 0x87, 0x49, 0x6c, 0x77, 0xc4, 0x94, 0x3a, 0x44, 0x86, 0x70, 0xb4, 0xf2, 0x67,
	0xb8, 0x62, 0x76, 0x77, 0xd4, 0x19, 0xf7, 0xbd, 0x32, 0x72, 0xbf, 0x1b, 0x60, 0x4b, 0x1a, 0x1f,
	0x43, 0xc6, 0x93, 0x05, 0xf5, 0xa3, 0x03, 0x10, 0xc9, 0x77, 0x6a, 0x96, 0x05, 0x4b, 0xe4, 0xcc,
	0xee, 0x8d, 0x3a, 0x63, 0xd3, 0x93, 0x61, 0x63, 0xa7, 0x1e, 0xb2, 0x28, 0xf2, 0xe9, 0xe6, 0x10,
	0x3b, 0xf5, 0xd5, 0x80, 0x81, 0xa4, 0x31, 0xf5, 0xb3, 0x05, 0x1e, 0x82, 0xc4, 0x67, 0x38, 0x97,
	0x1c, 0x2a, 0x8f, 0x9d, 0x43, 0xc7, 0x4f, 0xc3, 0x12, 0x39, 0xff, 0x24, 0xcf, 0x00, 0x68, 0x99,
	0x85, 0x73, 0x81, 0xfc, 0xc4, 0x53, 0x46, 0xc8, 0x00, 0x7a, 0x48, 0x69, 0x42, 0x4b, 0xe4, 0x22,
	0x70, 0x7f, 0x09, 0x81, 0x41, 0x42, 0xe7, 0x3b, 0xfb, 0x71, 0x00, 0xbd, 0xb5, 0xbf, 0xca, 0x50,
	0x00, 0x98, 0x5e, 0x11, 0x90, 0xd7, 0x0d, 0x51, 0xd6, 0xf5, 0xf3, 0xc9, 0xfa, 0x6a, 0xa2, 0x43,
	0x9c, 0x7c, 0x12, 0x69, 0x1f, 0x62, 0x4e, 0x37, 0x52, 0xba, 0x73, 0x0b, 0x96, 0x32, 0x9c, 0xab,
	0x5e, 0xe2, 0x46, 0xaa, 0x5e, 0xe2, 0xa6, 0x06, 0x2d, 0x98, 0x14, 0xc1, 0x9d, 0x79, 0x63, 0xb8,
	0xbf, 0x85, 0x83, 0x72, 0x9c, 0x3d, 0x58, 0x5c, 0xaf, 0xed, 0x6d, 0x4b, 0xdb, 0x65, 0xad, 0xad,
	0x8d, 0xb9, 0x6f, 0x75, 0xf5, 0xb9, 0xed, 0xdc, 0x1d, 0xff, 0x7d, 0x6e, 0x4d, 0xc4, 0x7d, 0x2b,
	0xfb, 0x69, 0x00, 0x29, 0x70, 0x76, 0x6c, 0x38, 0xbd, 0xae, 0xbb, 0x96, 0x2e, 0xb7, 0xd6, 0xa5,
	0xe2, 0xed, 0x5b, 0xd5, 0x0d, 0x9c, 0x16, 0x20, 0x7f, 0xe9, 0xe0, 0xaa, 0x43, 0x4d, 0xa5, 0x43,
	0xaf, 0x7f, 0x74, 0xe1, 0xf8, 0xa1, 0x78, 0x9e, 0xc8, 0x25, 0x74, 0xa6, 0xc8, 0xc9, 0x69, 0xce,
	0xb9, 0x7e, 0x9d, 0x9c, 0xb3, 0x2a, 0x2e, 0x6b, 0xdf, 0xc3, 0x59, 0xeb, 0x99, 0x21, 0x4e, 0xa1,
	0x53, 0xf7, 0xf6, 0x38, 0x03, 0x75, 0xae, 0x2a, 0x32, 0x85, 0xa7, 0x8f, 0x1e, 0x09, 0x72, 0xa1,
	0xa6, 0xb6, 0x4d, 0xbe, 0xa5, 0x90, 0xc2, 0xa6, 0xb4, 0x4e, 0x93, 0x4d, 0xd3, 0x4f, 0x5b, 0x8a,
	0xbc, 0x83, 0x93, 0xc6, 0x45, 0x4c, 0x6c, 0x35, 0x4d, 0x3d, 0xba, 0x2d, 0x05, 0xde, 0xe4, 0x05,
	0x94, 0x6b, 0x47, 0x16, 0x78, 0x7c, 0x13, 0x39, 0xa4, 0x9e, 0xa9, 0x96, 0xbf, 0xcf, 0x45, 0x34,
	0x3a, 0x5b, 0x8a, 0xd0, 0xb5, 0xbb, 0xb6, 0x44, 0xc5, 0x40, 0xee, 0x82, 0xbd, 0xad, 0xa7, 0xb4,
	0xcb, 0x6f, 0xc1, 0x52, 0x7c, 0x4a, 0x86, 0x7a, 0xe3, 0xea, 0x96, 0xce, 0x8e, 0xc4, 0x7f, 0xcd,
	0xab, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x99, 0x89, 0x89, 0x1b, 0xe8, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	RegisterCounter(ctx context.Context, in *RegisterCounterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	RegisterHistogram(ctx context.Context, in *RegisterHistogramRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	RegisterSummary(ctx context.Context, in *RegisterSummaryRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	RegisterGauge(ctx context.Context, in *RegisterGaugeRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	RecordCounter(ctx context.Context, in *RecordCounterRequest, opts ...grpc.CallOption) (*RecordResponse, error)
	RecordHistogram(ctx context.Context, in *RecordHistogramRequest, opts ...grpc.CallOption) (*RecordResponse, error)
	RecordSummary(ctx context.Context, in *RecordSummaryRequest, opts ...grpc.CallOption) (*RecordResponse, error)
	RecordGauge(ctx context.Context, in *RecordGaugeRequest, opts ...grpc.CallOption) (*RecordResponse, error)
}

type serviceClient struct {
	cc *grpc.ClientConn
}

func NewServiceClient(cc *grpc.ClientConn) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/v1.Service/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) RegisterCounter(ctx context.Context, in *RegisterCounterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/v1.Service/RegisterCounter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) RegisterHistogram(ctx context.Context, in *RegisterHistogramRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/v1.Service/RegisterHistogram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) RegisterSummary(ctx context.Context, in *RegisterSummaryRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/v1.Service/RegisterSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) RegisterGauge(ctx context.Context, in *RegisterGaugeRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/v1.Service/RegisterGauge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) RecordCounter(ctx context.Context, in *RecordCounterRequest, opts ...grpc.CallOption) (*RecordResponse, error) {
	out := new(RecordResponse)
	err := c.cc.Invoke(ctx, "/v1.Service/RecordCounter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) RecordHistogram(ctx context.Context, in *RecordHistogramRequest, opts ...grpc.CallOption) (*RecordResponse, error) {
	out := new(RecordResponse)
	err := c.cc.Invoke(ctx, "/v1.Service/RecordHistogram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) RecordSummary(ctx context.Context, in *RecordSummaryRequest, opts ...grpc.CallOption) (*RecordResponse, error) {
	out := new(RecordResponse)
	err := c.cc.Invoke(ctx, "/v1.Service/RecordSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) RecordGauge(ctx context.Context, in *RecordGaugeRequest, opts ...grpc.CallOption) (*RecordResponse, error) {
	out := new(RecordResponse)
	err := c.cc.Invoke(ctx, "/v1.Service/RecordGauge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
type ServiceServer interface {
	Get(context.Context, *GetRequest) (*GetResponse, error)
	RegisterCounter(context.Context, *RegisterCounterRequest) (*RegisterResponse, error)
	RegisterHistogram(context.Context, *RegisterHistogramRequest) (*RegisterResponse, error)
	RegisterSummary(context.Context, *RegisterSummaryRequest) (*RegisterResponse, error)
	RegisterGauge(context.Context, *RegisterGaugeRequest) (*RegisterResponse, error)
	RecordCounter(context.Context, *RecordCounterRequest) (*RecordResponse, error)
	RecordHistogram(context.Context, *RecordHistogramRequest) (*RecordResponse, error)
	RecordSummary(context.Context, *RecordSummaryRequest) (*RecordResponse, error)
	RecordGauge(context.Context, *RecordGaugeRequest) (*RecordResponse, error)
}

// UnimplementedServiceServer can be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (*UnimplementedServiceServer) Get(ctx context.Context, req *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedServiceServer) RegisterCounter(ctx context.Context, req *RegisterCounterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCounter not implemented")
}
func (*UnimplementedServiceServer) RegisterHistogram(ctx context.Context, req *RegisterHistogramRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterHistogram not implemented")
}
func (*UnimplementedServiceServer) RegisterSummary(ctx context.Context, req *RegisterSummaryRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterSummary not implemented")
}
func (*UnimplementedServiceServer) RegisterGauge(ctx context.Context, req *RegisterGaugeRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterGauge not implemented")
}
func (*UnimplementedServiceServer) RecordCounter(ctx context.Context, req *RecordCounterRequest) (*RecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordCounter not implemented")
}
func (*UnimplementedServiceServer) RecordHistogram(ctx context.Context, req *RecordHistogramRequest) (*RecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordHistogram not implemented")
}
func (*UnimplementedServiceServer) RecordSummary(ctx context.Context, req *RecordSummaryRequest) (*RecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordSummary not implemented")
}
func (*UnimplementedServiceServer) RecordGauge(ctx context.Context, req *RecordGaugeRequest) (*RecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordGauge not implemented")
}

func RegisterServiceServer(s *grpc.Server, srv ServiceServer) {
	s.RegisterService(&_Service_serviceDesc, srv)
}

func _Service_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Service/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_RegisterCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterCounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).RegisterCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Service/RegisterCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).RegisterCounter(ctx, req.(*RegisterCounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_RegisterHistogram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterHistogramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).RegisterHistogram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Service/RegisterHistogram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).RegisterHistogram(ctx, req.(*RegisterHistogramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_RegisterSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).RegisterSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Service/RegisterSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).RegisterSummary(ctx, req.(*RegisterSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_RegisterGauge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterGaugeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).RegisterGauge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Service/RegisterGauge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).RegisterGauge(ctx, req.(*RegisterGaugeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_RecordCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordCounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).RecordCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Service/RecordCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).RecordCounter(ctx, req.(*RecordCounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_RecordHistogram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordHistogramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).RecordHistogram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Service/RecordHistogram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).RecordHistogram(ctx, req.(*RecordHistogramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_RecordSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).RecordSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Service/RecordSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).RecordSummary(ctx, req.(*RecordSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_RecordGauge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordGaugeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).RecordGauge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Service/RecordGauge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).RecordGauge(ctx, req.(*RecordGaugeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Service_Get_Handler,
		},
		{
			MethodName: "RegisterCounter",
			Handler:    _Service_RegisterCounter_Handler,
		},
		{
			MethodName: "RegisterHistogram",
			Handler:    _Service_RegisterHistogram_Handler,
		},
		{
			MethodName: "RegisterSummary",
			Handler:    _Service_RegisterSummary_Handler,
		},
		{
			MethodName: "RegisterGauge",
			Handler:    _Service_RegisterGauge_Handler,
		},
		{
			MethodName: "RecordCounter",
			Handler:    _Service_RecordCounter_Handler,
		},
		{
			MethodName: "RecordHistogram",
			Handler:    _Service_RecordHistogram_Handler,
		},
		{
			MethodName: "RecordSummary",
			Handler:    _Service_RecordSummary_Handler,
		},
		{
			MethodName: "RecordGauge",
			Handler:    _Service_RecordGauge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
